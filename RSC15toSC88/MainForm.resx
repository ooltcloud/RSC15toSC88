<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="MidiPortAComboBox.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAEACACoDgAAFgAAACgAAAAwAAAAYAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAB1dXUAdnZ2AHd3dwB4eHgAeXl5AHp6egB7e3sAfHx8AH19fQB+fn4Af39/AICAgACBgYEAgoKCAIOD
        gwCEhIQAhYWFAIaGhgCHh4cAiIiIAImJiQCKiooAi4uLAIyMjACNjY0Ajo6OAI+PjwCQkJAAkZGRAJKS
        kgCTk5MAlJSUAJWVlQCWlpYAl5eXAJiYmACZmZkAmpqaAJubmwCcnJwAnZ2dAJ6engCfn58AoKCgAKGh
        oQCioqIAo6OjAKSkpAClpaUApqamAKenpwCoqKgAqampAKqqqgCrq6sArKysAK2trQCurq4Ar6+vALCw
        sACxsbEAsrKyALOzswC0tLQAtbW1ALa2tgC3t7cAuLi4ALm5uQC6uroAu7u7ALy8vAC9vb0Av7+/AMDA
        wADBwcEAw8PDAMTExADFxcUAxsbGAMfHxwDIyMgAycnJAMrKygDLy8sAzMzMAM3NzQDOzs4Az8/PANDQ
        0ADR0dEA0tLSANPT0wDU1NQA1dXVANbW1gDX19cA2NjYANnZ2QDa2toA29vbANzc3ADd3d0A39/fAODg
        4ADh4eEA4uLiAOPj4wDl5eUA5ubmAOfn5wDo6OgA6enpAOrq6gDr6+sA7OzsAO3t7QDu7u4A7+/vAPDw
        8ADx8fEA8vLyAPPz8wD09PQA9fX1APb29gD39/cA+Pj4APn5+QD6+voA+/v7APz8/AD9/f0A/v7+AP//
        /wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAhoaGhoaGhoaGhoaGhoWGhntmRCQVGyIlJiMeFh03XHOGhoWGhoaGhoaGhoaGhoaGhoaGhoaG
        hoaGhoaGhoZ3KAgeWX+EhYWFhYWFhIRpNAgRX4aGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoWGZiAXWHqG
        hoaGhoaGhoaGhoWGhoRmLw9KhoaFhoaGhoaGhoaGhoaGhoaGhoaFhn02E1qGhoWGhoaGhoaGhoaGhoaG
        hoaFhngjGHCGhYaGhoaGhoaGhoaGhoaGhoaGbgtHg4aFhoaGhoaGhoaGhoaGhoaGhoaGhYaFaglBhoWG
        hoaGhoaGhoaGhoaGhYZMC2mGhYaGhoaGa0cvHRELCg8YKD5ehYaGhoaGhoArJoWGhoaGhoaGhoaGhoaF
        hkMVhoaGhoWGfloRBQkKCgoKCgoKCgkGBEF4hoaFhoWGPRZ/hoaGhoaGhoaGhoaGSBmEhoWGhoZSEQkJ
        CgoKCgoKCgoKCgoKCQkNMIaGhoaFhlEVhoWGhoaGhoaGhYZWEYOGhoaGeCcECgoKCgoKCgoKCgoKCgoK
        CgoKBxBehoaGhYY8J4aFhoaGhoaGhnoIgIaGhoaGMggKCQkLDAkKCgoKCgoKCgoJDAsJCgoFboaGhoWG
        KUSGhYaGhoaFghNdhoWGhoaGNQgKCTF4djYICgoKCgoKCgZQeHEUCQoHb4aGhoaFfwhxhoaGhoaGTy2G
        hoaGhoaGNQgJC4OFhYYZCQoKCgoKCTSGhYaCDAoHb4aGhoaGhmgahoaGhoV/CIKFhoaGhoaGNQgJHIaG
        hoZACQoKCgoKCEyFhoWGGwoHb4aGhoaGhoUhToaGhoY6OoaGhoaGhoaGNQgJC4CFhYYUCQoKCgoKCTGG
        hYaCCgoHb4aGhoaGhoZ0EYaFhYYPgoaGhoaGhoaGNQgKCStqazAICgoKCgoKCgZHbGUTCQoHb4aGhoaG
        hoWGKmaGhlo1hoaFhoaGhoaGNQgKCgoJCQkKCgoKCgoKCgoJCQkJCgoHb4aGhoaGhYaFYxWGhhdkhoaF
        hoODg4OGNAgKCgoKCgoKCgoKCgoKCgoKCgoKCgoIbIODg4OFhYaGgQh1eQl9hoaGQQABAQEBBwoKCgoK
        CgoKCgoKCgoKCgoKCgoKCgoKAwEBAQEHhoaGhithaRqGhoaGCAkKCgoKCgoKCgoKCgoKCgoKCgoKCgoK
        CgoKCgoKCgoKCgoFZ4aGhmA/VEaGhoZyBAoKCQMDAwkKCgoKCgoJAgQFCQoKCgoKCgoKCgoHBAIICgoJ
        R4aGhoIhPGaGhoZYBwoJEm2GaBAJCgoKCgkce4ZZCwoKCgoKCgoKCgpFhoQqCAoKMIaGhoQWKn6GhoVH
        CQoEaoaFhlUFCgoKCgKBhoWGOwcKCgoKCgoKCSSFhoaGFwoKIIaGhoUbIoSFhoY8CgoChoaGhnADCgoK
        Cg2GhYaGWAUKCgoKCgoKCDWGhoWGKQoKFoaGhoUgH4SGhoY4CgoGUYaGhkEHCgoKCgNrhoaGJwkKCgoK
        CgoKChuDhoaCCwoKEoaGhoUiIISGhoY4CgoJC0BlOQoKCgoKCgkOS2QrCgoKCgoKCgoKCgkdX1UTCQoK
        E4aGhoUhJYOGhoZACQoKCgcEBwoKCgoKCgoJBgQICgoKCgoKCgoKCgoJBAUJCgoKGYaGhoUeMnOGhoZN
        CAoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKJoaGhoQXR1eGhoZkBgoKCgoKCgoKCgoK
        CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKOIaGhYQZXzOGhoaBAwoKCgoKCQcGCQoKCgoKCgoHBgkKCgoK
        CgoKBwYJCgoKCgoIUoWGhngscAuGhoaGJQkKCgoJCzdQFgkKCgoKCQk+ThUJCgoKCgkLREkOCQoKCgkE
        doaGhktNgghyhYaGZgkKCgoFZoaGhiUJCgoKB2eGhoUUCQoKCg95hoaBFgoKCgkjhoaGhhNrhjNShoaF
        fxAKCgoVhoWGhk8GCgoJCIaGhoZPCAoKCiaFhoaGNwoKCglphoaFcwqAhnsZhoWGhkQHCgoMhoWGhkII
        CgoJBIWGhoY8CAoKCh+FhYWGLgoKChSDhYaGTjiGhYYcZYaGhoYYCgoIKoWGaA8KCgoKCTiGhl0ICQoK
        CghGhoZRCQoKA2mGhoaGEH+GhoVYGYWFhoViBgoKCQQNBAoKCgoKCggECwUKCgoKCgoICAsHCgoJOYaF
        hoZLKoaGhoaGG2uGhoWGSggKCgkJCgoKCgoKCgoJCQoKCgoKCgoKCQkJCgkQhYWGhYIMcoWGhoaGbg1+
        hYaFhi0GCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCRB7hoaGhjdGhoaGhoaGhjg1hoaGhYYtCAoKCgoK
        CgoKCgoKCgoKCgoKCgoKCgoJEnqGhoWGXhGAhYaGhoaGhoYhR4aGhYWGRwYKCgoKCgkICAgICAgICAgK
        CgoKCggbf4aFhoZ8CHqGhoaGhoaGhoV6EV2GhoaFhmAWBwoKCi5cW1tbW1tbW00JCgoICUqGhoaGhn8M
        W4aFhoaGhoaGhoaFewtdhoaGhYWGPw8ICUKGhoaGhoaGhnAICA0nf4aFhoWGfQ5WhoaGhoaGhoaGhoaF
        hnsRRYaFhoaGhn5iIT6GhoaGhoaGhm4SU3uGhoWGhYZzCliGhYaGhoaGhoaGhoaGhYV7IzN9hoWGhoWG
        hoaGhoaGhoaGhoaGhoWGhoWGhlEKYoaFhoaGhoaGhoaGhoaGhoaFhjsMZ4WGhYaGhoaGhoaGhoaGhoaG
        hoaFhoV+IBqChoaGhoaGhoaGhoaGhoaGhoaGhoZxHxdghoaFhoaGhoaGhoaGhoaGhoaGdywJXIWGhYaG
        hoaGhoaGhoaGhoaGhoaGhoaGhl0fFE1uhoaGhoaFhoaGhoaGd1woEkSGhoWGhoaGhoaGhoaGhoaGhoaG
        hoaGhoaGhoWGgDsKCChNanyEg4FxWjcOCSNphoaFhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaFhoaF
        c2VMOSslJSg0Rl1tfoaGhYaGhoaGhoaGhoaGhoaGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>